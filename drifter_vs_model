# -*- coding: utf-8 -*-
"""
Created on Tue Oct 13 11:38:36 2015 by JiM
Basically compares observed drifter tracks with model-derived particle tracks
JiM began the code with subsequent modifications by several students:
Conner Warren, Tim Anderson, Nkosi Muse, Qianran Zhang, and Xiaojian Liu  
To run this code you need to have drifter ID and start_time (or a list of units in your "drift_list" file) 
You can choose to get drifter data format from ('raw''csv','erddap' or drifter list)
You can choose to get the model data from('GOM3','massbay','ROMS').
You can choose add wind correction factor (or wind=0) where to get the wind ('FVCOM' or 'NCEP')
The output is two figures (drifter/model track  amd separation distance vs time)
and one file with tabulated separation distance/day and separations distance/km
"""
import datetime as dt
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import numpy as np
import csv
from matplotlib.dates import date2num,num2date
from drifter_vs_model_function import get_drifter_track,get_fvcom,get_roms,calculate_SD,drifterhr,sh_interp3
######## Hard codes ##########
drifter_data_type='erddap'#'raw''csv','erddap','npy'  the method of get drifter data
Model=['GOM3']#'GOM3','massbay','30yr','ROMS'# model want to be compair with drifter track
drifter_ID = ['116410702']#if drifter_ID=[],get drifter id from list  
drifter_list='erddap_drifter_list_both.csv'#get from get_drifter_list code
depth =[-1]
track=20 #how many drifter tracks you want compare
days=2 #for each drifter, this is how many days want to compare at one time 
track_days=1 #each time how many days want to compair
restart_days=1 #the day you want to restart compair
start_times =[dt.datetime(2011,6,1,19,57,0,0)]#if have drifter_ID it will be use how many drifter have how many data 
#data_type='raw'#'hourly' 'rmtide'
wind_get_type='FVCOM'#'NCEP'
wind=0.05#if you don't want have wind correct,wind =0

######## Define the drifter_list depending on the model ##########
print "get drifter data from "+ drifter_data_type+" use %s model compare %i days" %(Model,days-1)
#the file we get from the program erddap_getdrifter_list 
if drifter_list==[]:
    if 'ROMS' in Model and '30yr' in Model:
        drifter_list='erddap_drifter_list_both.csv'
    elif 'ROMS' in Model and '30yr' not in Model:
        drifter_list='erddap_drifter_list_roms.csv'
    elif 'ROMS' not in Model and '30yr' in Model:
        drifter_list='erddap_drifter_list_30yr.csv'
file_drID=[];

####### Initialize some variables #########################
if 'ROMS' in Model:
    romstmeandis=[];romstmindis=[];romstmaxdis=[];romsdmeandis=[];romsdmindis=[];romsdmaxdis=[]
if '30yr' in Model:
    yrtmeandis=[];yrtmindis=[];yrtmaxdis=[];yrdmeandis=[];yrdmindis=[];yrdmaxdis=[]
if 'GOM3' in Model:
    gomtmeandis=[];gomtmindis=[];gomtmaxdis=[];gomdmeandis=[];gomdmindis=[];gomdmaxdis=[]
if 'massbay' in Model:
    masstmeandis=[];masstmindis=[];masstmaxdis=[];massdmeandis=[];massdmindis=[];massdmaxdis=[];

#####get drifter information into a dictionary from file or hard code
if drifter_ID==[]:#get drifter information from file
    # read in the drifter IDs and their mean,min, max sample intervals    
    start_times=[]    
    drifters = np.genfromtxt(drifter_list,dtype=None,names=['ids','start_time','days','mean','max','min','depth'],delimiter=',',skip_header=2)    
    for i in range(len(drifters['ids'])):
        dt_time=datetime.strptime(drifters['start_time'][i], '%Y-%m-%d'+' '+'%H:%M:%S+00:00')       
        start_times.append(dt_time)
else:
    drifters=dict(ids=[],days=[])
    drifters['ids']=drifter_ID
    drifters['depth']=depth
    for b in range(len(drifter_ID)):
        drifters['days'].append(days)  

#######get drifter track
for num in range(min(len(drifters['ids']),track)): # we limit runs to "track" drifters (typically 20) because it often bombs   
    print drifters['ids'][num]
    drifter_points = dict(ids=[],lat_hr=[],h_hr=[],lon_hr=[],lon=[],lat=[],time=[],distance=[]);rawtime=[]
    drifter_points['ids']=drifters['ids'][num]
    if drifters['days'][num]>days:
        drifters['days'][num]=days

    # go get drifter track for this id
    drifter_points=get_drifter_track(drifter_data_type,start_times[num],drifters['days'][num],drifters['ids'][num])     
    # calculates the hourly value for this drifter
    #print drifter_points
    if drifter_data_type=='hourly' or drifter_data_type=='retide':
        if len(drifter_points['time'])>2:
            
            rawtime.append(date2num(drifter_points['time']))
            t1=np.ceil(np.min(rawtime)*24.)/24.
            t2=np.floor(np.max(rawtime)*24.)/24.
            tdh=np.arange(t1,t2,1./24.)
            drifter_points['lon_hr']=sh_interp3(np.array(tdh),np.array(rawtime[0]),np.array(drifter_points['lon']))
            drifter_points['lat_hr']=sh_interp3(np.array(tdh),np.array(rawtime[0]),np.array(drifter_points['lat']))  
            drifter_points['h_hr']=[]
            for j in range(len(rawtime[0])): 
                datetime_hr=num2date(rawtime[0][j]).replace(tzinfo=None)
                drifter_points['h_hr'].append(datetime_hr)
    
    #if drifter_data_type=='retide':    
        
    #print drifter_points
    for i in Model:
        distance=[]
        meantimedis=[];meandisdist=[]
        model_points =dict(lon=[],lat=[],time=[]) #note the underscore "model_points" is the whole track
        for nday in np.arange(0,drifters['days'][num]-1,restart_days):  
            modelpoints = dict(lon=[],lat=[],time=[]) # this is for track_days of the track
            start_time=drifter_points['h_hr'][nday*24]
            end_times=drifter_points['h_hr'][(nday+track_days)*24-1]

            GRIDS= ['GOM3','massbay','30yr']#those three model can use one function to get model data
            if i in GRIDS:
                get_obj =  get_fvcom(i)
                url_fvcom = get_obj.get_url(start_time,end_times)                
                b_points = get_obj.get_data(url_fvcom) # b_points is model boundary points.
                modelpoints,windspeed= get_obj.get_track(drifter_points['lon_hr'][nday*24],drifter_points['lat_hr'][nday*24],drifters['depth'][num],start_time,wind,wind_get_type)#get one day model data
                print 2
            if i=='ROMS':        
                get_obj = get_roms()
                url_roms = get_obj.get_url(start_time,end_times)
                get_obj.get_data(url_roms)
                modelpoints ,windspeed= get_obj.get_track(drifter_points['lon_hr'][nday*24],drifter_points['lat_hr'][nday*24],drifters['depth'][num],start_time,wind,wind_get_type)#,DEPTH
                print 3
                       

            # if the model, for example, goes out of the domain, it will have less # of points 
            
            if len(modelpoints['lon'])==24*track_days and windspeed<36:#one day model should have 24 points            
                model_points['lon'].append(modelpoints['lon']); model_points['lat'].append(modelpoints['lat']);model_points['time'].append(modelpoints['time'])#"model_points" has all days data wjile "modelpoints" is track_days data
                                
                dist=[];
                #dist is one day all distance ; meantdis is this day mean distance/day ; meandisdis is this day mean distance/distance
                dist,meantdis,meandisdis=calculate_SD(modelpoints,drifter_points['lon_hr'][nday*24:(nday+track_days)*24],drifter_points['lat_hr'][nday*24:(nday+track_days)*24],drifter_points['h_hr'][nday*24:(nday+track_days)*24])
                distance.append(dist)#one drifter one model all distance 
                meandisdist.append(meandisdis) #one drifter one model per day mean distance/dist                
                meantimedis.append(meantdis)#one drifter one model per day mean distance/day
                print meantimedis
            else:
                model_points['lon'].append(modelpoints['lon']); model_points['lat'].append(modelpoints['lat']);model_points['time'].append(modelpoints['time'])#model_points is all days data modelpoints is only one days data
            print meantimedis
        drifter_points['distance'].append(distance)
        print 4
#########plot######
        plt.figure(1) 
        plt.title('drifter track and %s model track'%i)
        if drifter_data_type=='raw':
            plt.plot(drifter_points['lon'],drifter_points['lat'],'bo-')
        elif drifter_data_type=='hourly':
            plt.plot(drifter_points['lon_hr'],drifter_points['lat_hr'],'bo-')
        for a in range(len(model_points['lon'])):
            plt.plot(model_points['lon'][a],model_points['lat'][a],'ro-')
        plt.grid(True)
        plt.savefig('drifter %s model %s track 1' %(drifters['ids'][num],i) )
        plt.show()
        
        
        plt.figure(2) 
        plt.title('drifter %s different day distance'%drifters['ids'][num])
        plt.ylabel('distance(km)')   
        plt.xlabel('time')  
        for a in range(len(drifter_points['distance'][0])):
            print drifter_points['distance'][0][a][-1]
            plt.plot(drifter_points['distance'][0][a])#,label='%s model the %i day SD' % (i,a+1) )
            plt.text(len(drifter_points['distance'][0][a])-1,drifter_points['distance'][0][a][-1],'meandis=%.2f' %(meantimedis[a]),color='red',fontsize=12)
        '''plt.text(0,28,'meandis is mean separation distance',color='black',fontsize=12)'''
        plt.savefig('drifter %s model %s SD' %(drifters['ids'][num],i) )
        plt.show()#different day drifter data maybe hiatus in different time'''


#### make a chat###      
        if i == 'ROMS':
            romstmeandis.append(np.mean(meantimedis))
            romstmindis.append(min(meantimedis))
            romstmaxdis.append(max(meantimedis))
            romsdmeandis.append(np.mean(meandisdist))
            romsdmindis.append(min(meandisdist))
            romsdmaxdis.append(max(meandisdist))
        if i == '30yr':
            yrtmeandis.append(np.mean(meantimedis))
            yrtmindis.append(min(meantimedis))
            yrtmaxdis.append(max(meantimedis))
            yrdmeandis.append(np.mean(meandisdist))
            yrdmindis.append(min(meandisdist))
            yrdmaxdis.append(max(meandisdist))
            
        if i == 'GOM3':
            gomtmeandis.append(np.mean(meantimedis))
            gomtmindis.append(min(meantimedis))
            gomtmaxdis.append(max(meantimedis))
            gomdmeandis.append(np.mean(meandisdist))
            gomdmindis.append(min(meandisdist))
            gomdmaxdis.append(max(meandisdist))
        if i == 'massbay':
            masstmeandis.append(np.mean(meantimedis))
            masstmindis.append(min(meantimedis))
            masstmaxdis.append(max(meantimedis))
            massdmeandis.append(np.mean(meandisdist))
            massdmindis.append(min(meandisdist))
            massdmaxdis.append(max(meandisdist))
    file_drID.append(drifters['ids'][num])

    data=[];tdata=[];model=[]
    if 'ROMS' in Model:
        data.append(romstmeandis);data.append(romstmindis);data.append(romstmaxdis);data.append(romsdmeandis);data.append(romsdmindis);data.append(romsdmaxdis);
        model.append('ROMS')
    if '30yr' in Model:
        data.append(yrtmeandis);data.append(yrtmindis);data.append(yrtmaxdis);data.append(yrdmeandis);data.append(yrdmindis);data.append(yrdmaxdis);
        model.append('30yr')
    if 'GOM3' in Model:
        data.append(gomtmeandis);data.append(gomtmindis);data.append(gomtmaxdis);data.append(gomdmeandis);data.append(gomdmindis);data.append(gomdmaxdis);
        model.append('GOMS')
    if 'massbay' in Model:
        data.append(masstmeandis);data.append(masstmindis);data.append(masstmaxdis);data.append(massdmeandis);data.append(massdmindis);data.append(massdmaxdis);
        model.append('massbay')

    tdata.append(file_drID)
    for w in range(0,len(data),1):
        ldata=[]    
        for e in data[w]:
            e="%.2f" %e
            ldata.append(e)
        tdata.append(ldata)
            
    chat=map(list, zip(*tdata))
    #print chat
    csvfile = file('drifter_vs_model.csv', 'wb')
    writer = csv.writer(csvfile)
    fh=['ids']
    for z in range(len(model)):
        fh.append('%s_meandis(km/day)' %model[z] )
        fh.append('mindis(km)')
        fh.append('maxdis(km)')
        fh.append('%s_meandis(km/km)' %model[z] )
        fh.append('mindis(km)')
        fh.append('maxdis(km)')
        #print z,model,fh
        
    writer.writerow(fh)
    writer.writerows(chat)
    csvfile.close() 
    
file_drID.append('mean')
if 'ROMS' in Model:
    romstmeandis.append(np.mean(romstmeandis));romstmindis.append(min(romstmindis));romstmaxdis.append(max(romstmaxdis));romsdmeandis.append(np.mean(romsdmeandis));romsdmindis.append(min(romsdmindis));romsdmaxdis.append(max(romsdmaxdis))
    data.append(romstmeandis);data.append(romstmindis);data.append(romstmaxdis);data.append(romsdmeandis);data.append(romsdmindis);data.append(romsdmaxdis);
    model.append('ROMS')
if '30yr' in Model:
    yrtmeandis.append(np.mean(yrtmeandis));yrtmindis.append(min(yrtmindis));yrtmaxdis.append(max(yrtmaxdis));yrdmeandis.append(np.mean(yrdmeandis));yrdmindis.append(min(yrdmindis));yrdmaxdis.append(max(yrdmaxdis))
    data.append(yrtmeandis);data.append(yrtmindis);data.append(yrtmaxdis);data.append(yrdmeandis);data.append(yrdmindis);data.append(yrdmaxdis);
    model.append('30yr')
if 'GOM3' in Model:
    gomtmeandis.append(np.mean(gomtmeandis));gomtmindis.append(min(gomtmindis));gomtmaxdis.append(max(gomtmaxdis));gomdmeandis.append(np.mean(gomdmeandis));gomdmindis.append(min(gomdmindis));gomdmaxdis.append(max(gomdmaxdis))
    data.append(gomtmeandis);data.append(gomtmindis);data.append(gomtmaxdis);data.append(gomdmeandis);data.append(gomdmindis);data.append(gomdmaxdis);
    model.append('GOMS')
if 'massbay' in Model:
    masstmeandis.append(np.mean(masstmeandis));masstmindis.append(min(masstmindis));masstmaxdis.append(max(masstmaxdis));massdmeandis.append(np.mean(massdmeandis));massdmindis.append(min(massdmindis));massdmaxdis.append(max(massdmaxdis))
    data.append(masstmeandis);data.append(masstmindis);data.append(masstmaxdis);data.append(massdmeandis);data.append(massdmindis);data.append(massdmaxdis);
    model.append('massbay')


plt.figure(3)
plt.plot(yrtmeandis,'ro-')
plt.ylabel('distance(km)/day')        
#plt.xlable('drifters')
for i in range(len(model)):
    if i == 'ROMS':
        plt.plot(romstmeandis,'bo-',label='roms')    
    if i == 'ROMS':
        plt.plot(yrtmeandis,'ro-',label='30yr') 
plt.savefig('km/day compare')
plt.show() 
plt.figure(4)
plt.plot(yrdmeandis,'ro-')
plt.ylabel('distance(km)/km')        
plt.xlabel('drifters')
for i in range(len(model)):
    if i == 'ROMS':
        plt.plot(romsdmeandis,'bo-',label='roms')    
    if i == 'ROMS':
        plt.plot(yrdmeandis,'ro-',label='30yr') 
plt.savefig('km/km compare')
plt.show() 

'''y=np.random.randn(len(distance))
plt.scatter(distance,y)
plt.savefig('all mean dis' )
plt.show() '''
